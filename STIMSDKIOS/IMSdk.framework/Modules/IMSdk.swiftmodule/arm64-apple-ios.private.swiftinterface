// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name IMSdk
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AWSCore
import AWSS3
import Alamofire
import AliyunOSSiOS
import AsyncDisplayKit
import CocoaLumberjack
import CommonCrypto
import CoreGraphics
import Foundation
import HandyJSON
@_exported import IMSdk
import Localize_Swift
import MMKV
import MobileCoreServices
import NSObject_Rx
import ObjectiveC
import QuickLook
import Rswift
import RxCocoa
import RxGesture
import RxSwift
import SafariServices
import SnapKit
import Swift
import SwiftUI
import UIKit
import WCDBSwift
import _Concurrency
import _StringProcessing
import sqlcipher
@objc @_inheritsConvenienceInitializers @objcMembers public class TmMessage : ObjectiveC.NSObject, HandyJSON.HandyJSON {
  @objc public var id: Swift.Int
  @objc public var mid: Swift.String
  @objc public var amid: Swift.String
  @objc public var chatId: Swift.String
  @objc public var sender: Swift.String
  @objc public var content: IMSdk.TmMessageContentProtocol
  @objc public var status: Swift.Int
  @objc public var direction: Swift.Int
  @objc public var type: Swift.Int
  @objc public var isDel: Swift.Int
  @objc public var serverTime: Swift.Int
  @objc public var sendTime: Swift.Int
  @objc public var displayTime: Swift.Int
  @objc public var avatar: Swift.String
  @objc public var nickName: Swift.String
  @objc public var nameAlias: Swift.String
  @objc public var uid: Swift.String
  @objc public var extra: IMSdk.TmMessageExtra?
  @objc public var atType: Swift.Int
  @objc public var isLocal: Swift.Int
  @objc public var isPlayingAudio: Swift.Bool
  @objc public var playAudioProgross: Swift.Float
  @objc public var avatarInfo: IMSdk.AvatarModel?
  @objc public var imageInfo: IMSdk.AvatarModel?
  @objc public var videoPostInfo: IMSdk.AvatarModel?
  @objc public func isSend() -> Swift.Bool
  @objc public func isSingle() -> Swift.Bool
  @objc public func isThird() -> Swift.Bool
  @objc public func remoteObjectId() -> Swift.String
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc public var cellHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc public var messageContent: IMSdk.TmMessageContent {
    @objc get
    @objc set
  }
  @objc public var unknowMeaasgeText: Swift.String {
    @objc get
    @objc set
  }
  @objc public var cardMsgVo: IMSdk.TMCardMessageContentVo {
    @objc get
    @objc set
  }
  @objc public var uidTextMsgAVo: IMSdk.TMUidTextMessageContentVo {
    @objc get
    @objc set
  }
  @objc public var textNoticeContentVo: IMSdk.TMSystemNoticeContentVo {
    @objc get
    @objc set
  }
  @objc required override dynamic public init()
  @objc deinit
}
@objc extension UIKit.UIImage {
  @objc public static func sdk_bundleImage(imageName: Swift.String) -> UIKit.UIImage?
}
public typealias TMCommonClosure = (_ obj: Any?) -> Swift.Void
public typealias TMCommonErrorClosure = (_ error: Swift.Error) -> Swift.Void
public let THUMB_MIN_WIDTH: Swift.Int
public let THUMB_MIN_HEIGHT: Swift.Int
@objc public protocol ConversionViewModelDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func conversationUnReadNumChange()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class TMConversionViewModel : ObjectiveC.NSObject {
  @objc public var unReadCount: Swift.Int
  @objc public var partChatIds: [Swift.String]
  @objc public var unPartChatIds: [Swift.String]
  public typealias ConversationSortCalsure = (IMSdk.TmConversationInfo, IMSdk.TmConversationInfo) -> Swift.Bool
  @objc public func setSort(sortCalsure: @escaping IMSdk.TMConversionViewModel.ConversationSortCalsure)
  @objc public func getSortList(list: [IMSdk.TmConversationInfo]) -> [IMSdk.TmConversationInfo]
  @objc public static func createConversationViewModel(selector: IMSdk.TMConversionSelector) -> IMSdk.TMConversionViewModel
  @objc public func getUnReadCount(success: ((Swift.Int) -> ())?)
  @objc public func setChatTop(aChatId: Swift.String, success: (() -> ())?, fail: ((Swift.String) -> ())?)
  @objc public func setChatCloseTop(aChatId: Swift.String, success: (() -> ())?, fail: ((Swift.String) -> ())?)
  @objc public func getChatIsTop(aChatId: Swift.String) -> Swift.Bool
  @objc public func getChatIds() -> [Swift.String]
  @objc public func filterChatIds(chatIds: [Swift.String]) -> [Swift.String]
  @objc public func getConversionView() -> IMSdk.ConversationView
  @objc public func updateSelector(addAchatIds: [Swift.String] = [], removeAchatIds: [Swift.String] = [])
  @objc public func setFolder(aChatId: Swift.String, content: Swift.String, name: Swift.String, imageData: Foundation.Data, imageFormat: Swift.String)
  @objc deinit
}
extension Swift.String {
  public var md5: Swift.String {
    get
  }
  public enum MD5EncryptType {
    case lowercase32
    case uppercase32
    case lowercase16
    case uppercase16
    public static func == (a: Swift.String.MD5EncryptType, b: Swift.String.MD5EncryptType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func DDMD5Encrypt(_ md5Type: Swift.String.MD5EncryptType = .lowercase32) -> Swift.String
  public func deleteSpecialCharacters() -> Swift.String
  public func deleteSpecialCharactersWithBeginAndEnd() -> Swift.String
}
extension Swift.Dictionary {
  public var yh_jsonEnCode: Swift.String? {
    get
  }
}
@objc public protocol IMDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func authCodeExpire(aUid: Swift.String)
  @objc optional func onShowUserInfo(aUids: [Swift.String])
  @objc optional func onReceiveMessage(aMids: [Swift.String])
  @objc optional func onShowConversationSubTitle(aChatIds: [Swift.String])
  @objc optional func onShowConversationMarker(aChatIds: [Swift.String])
}
public func X(saveToSandbox: Swift.Bool)
public func YHDebugLog<T>(_ message: T, file: Swift.String = #file, line: Swift.Int = #line)
@_inheritsConvenienceInitializers @objc public class YHLogger : ObjectiveC.NSObject {
  @objc public static func log(message: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class StackSwipeActionView : IMSdk.SwipeActionView {
  @_Concurrency.MainActor(unsafe) @objc public init(action: IMSdk.SwipeAction, width: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc override public func setupSwipeActionView()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class ChatLoadingView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var loadingImageView: UIKit.UIImageView {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var duration: Swift.Double
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isHidden: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) public func startAnimating()
  @objc @_Concurrency.MainActor(unsafe) public func stopAnimating()
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class SwipeTableViewCell : UIKit.UITableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var isSwipeEnabled: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var isSwipeToExecuteEnabled: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var isActionsAnimationEnabled: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var isTapToCloseEnabled: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var swipeToExecuteTreshold: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: IMSdk.SwipeTableViewCellDelegate?
  @objc @_Concurrency.MainActor(unsafe) weak public var dataSource: IMSdk.SwipeTableViewCellDataSource?
  @objc @_Concurrency.MainActor(unsafe) weak public var tableView: UIKit.UITableView! {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var isSwiped: Swift.Bool {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var swipeClosure: ((CoreFoundation.CGFloat, Swift.Bool) -> ())?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToSuperview()
  @objc @_Concurrency.MainActor(unsafe) public func visibleAction(at index: Swift.Int) -> IMSdk.SwipeAction?
  @objc @_Concurrency.MainActor(unsafe) public func resetSwipe(completion: (() -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc deinit
}
public protocol MMJSONDefault {
  var boolValue: Swift.Bool { get }
  var intValue: Swift.Int { get }
  var int8Value: Swift.Int8 { get }
  var int16Value: Swift.Int16 { get }
  var int32Value: Swift.Int32 { get }
  var int64Value: Swift.Int64 { get }
  var uIntValue: Swift.UInt { get }
  var uInt8Value: Swift.UInt8 { get }
  var uInt16Value: Swift.UInt16 { get }
  var uInt32Value: Swift.UInt32 { get }
  var uInt64Value: Swift.UInt64 { get }
  var floatValue: Swift.Float { get }
  var doubleValue: Swift.Double { get }
  var stringValue: Swift.String { get }
}
public struct CustomDefaultValue : IMSdk.MMJSONDefault {
  public var boolValue: Swift.Bool {
    get
  }
  public var intValue: Swift.Int {
    get
  }
  public var int8Value: Swift.Int8 {
    get
  }
  public var int16Value: Swift.Int16 {
    get
  }
  public var int32Value: Swift.Int32 {
    get
  }
  public var int64Value: Swift.Int64 {
    get
  }
  public var uIntValue: Swift.UInt {
    get
  }
  public var uInt8Value: Swift.UInt8 {
    get
  }
  public var uInt16Value: Swift.UInt16 {
    get
  }
  public var uInt32Value: Swift.UInt32 {
    get
  }
  public var uInt64Value: Swift.UInt64 {
    get
  }
  public var floatValue: Swift.Float {
    get
  }
  public var doubleValue: Swift.Double {
    get
  }
  public var stringValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class RemarkModel : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum SwipeDirection : Swift.Int {
  case left
  case right
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TMTimeFormatTool : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public enum SwiftyJSONError : Swift.Int, Swift.Error {
  case unsupportedType
  case indexOutOfBounds
  case elementTooDeep
  case wrongType
  case notExist
  case invalidJSON
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension IMSdk.SwiftyJSONError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
public enum Type : Swift.Int {
  case number
  case string
  case bool
  case array
  case dictionary
  case null
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct JSON {
  public init(data: Foundation.Data, options opt: Foundation.JSONSerialization.ReadingOptions = []) throws
  public init(_ object: Any)
  public init(parseJSON jsonString: Swift.String)
  public mutating func merge(with other: IMSdk.JSON) throws
  public func merged(with other: IMSdk.JSON) throws -> IMSdk.JSON
  public var type: IMSdk.`Type` {
    get
  }
  public var error: IMSdk.SwiftyJSONError? {
    get
  }
  public var object: Any {
    get
    set
  }
  @available(*, unavailable, renamed: "null")
  public static var nullJSON: IMSdk.JSON {
    get
  }
  public static var null: IMSdk.JSON {
    get
  }
}
public enum Index<T> : Swift.Comparable {
  case array(Swift.Int)
  case dictionary(Swift.DictionaryIndex<Swift.String, T>)
  case null
  public static func == (lhs: IMSdk.Index<T>, rhs: IMSdk.Index<T>) -> Swift.Bool
  public static func < (lhs: IMSdk.Index<T>, rhs: IMSdk.Index<T>) -> Swift.Bool
}
public typealias JSONIndex = IMSdk.Index<IMSdk.JSON>
public typealias JSONRawIndex = IMSdk.Index<Any>
extension IMSdk.JSON : Swift.Collection {
  public typealias Index = IMSdk.JSONRawIndex
  public var startIndex: IMSdk.JSON.Index {
    get
  }
  public var endIndex: IMSdk.JSON.Index {
    get
  }
  public func index(after i: IMSdk.JSON.Index) -> IMSdk.JSON.Index
  public subscript(position: IMSdk.JSON.Index) -> (Swift.String, IMSdk.JSON) {
    get
  }
  public typealias Element = (Swift.String, IMSdk.JSON)
  public typealias Indices = Swift.DefaultIndices<IMSdk.JSON>
  public typealias Iterator = Swift.IndexingIterator<IMSdk.JSON>
  public typealias SubSequence = Swift.Slice<IMSdk.JSON>
}
public enum JSONKey {
  case index(Swift.Int)
  case key(Swift.String)
}
public protocol JSONSubscriptType {
  var jsonKey: IMSdk.JSONKey { get }
}
extension Swift.Int : IMSdk.JSONSubscriptType {
  public var jsonKey: IMSdk.JSONKey {
    get
  }
}
extension Swift.String : IMSdk.JSONSubscriptType {
  public var jsonKey: IMSdk.JSONKey {
    get
  }
}
extension IMSdk.JSON {
  public subscript(path: [IMSdk.JSONSubscriptType]) -> IMSdk.JSON {
    get
    set
  }
  public subscript(path: IMSdk.JSONSubscriptType...) -> IMSdk.JSON {
    get
    set
  }
}
extension IMSdk.JSON : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.StringLiteralType)
  public init(extendedGraphemeClusterLiteral value: Swift.StringLiteralType)
  public init(unicodeScalarLiteral value: Swift.StringLiteralType)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
}
extension IMSdk.JSON : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.IntegerLiteralType)
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
}
extension IMSdk.JSON : Swift.ExpressibleByBooleanLiteral {
  public init(booleanLiteral value: Swift.BooleanLiteralType)
  public typealias BooleanLiteralType = Swift.BooleanLiteralType
}
extension IMSdk.JSON : Swift.ExpressibleByFloatLiteral {
  public init(floatLiteral value: Swift.FloatLiteralType)
  public typealias FloatLiteralType = Swift.FloatLiteralType
}
extension IMSdk.JSON : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Any)...)
  public typealias Key = Swift.String
  public typealias Value = Any
}
extension IMSdk.JSON : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: Any...)
  public typealias ArrayLiteralElement = Any
}
extension IMSdk.JSON : Swift.RawRepresentable {
  public init?(rawValue: Any)
  public var rawValue: Any {
    get
  }
  public func rawData(options opt: Foundation.JSONSerialization.WritingOptions = JSONSerialization.WritingOptions(rawValue: 0)) throws -> Foundation.Data
  public func rawString(_ encoding: Swift.String.Encoding = .utf8, options opt: Foundation.JSONSerialization.WritingOptions = .prettyPrinted) -> Swift.String?
  public func rawString(_ options: [IMSdk.writingOptionsKeys : Any]) -> Swift.String?
  public typealias RawValue = Any
}
extension IMSdk.JSON : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension IMSdk.JSON {
  public var array: [IMSdk.JSON]? {
    get
  }
  public var arrayValue: [IMSdk.JSON] {
    get
  }
  public var arrayObject: [Any]? {
    get
    set
  }
}
extension IMSdk.JSON {
  public var dictionary: [Swift.String : IMSdk.JSON]? {
    get
  }
  public var dictionaryValue: [Swift.String : IMSdk.JSON] {
    get
  }
  public var dictionaryObject: [Swift.String : Any]? {
    get
    set
  }
}
extension IMSdk.JSON {
  public var bool: Swift.Bool? {
    get
    set
  }
  public var boolValue: Swift.Bool {
    get
    set
  }
}
extension IMSdk.JSON {
  public var string: Swift.String? {
    get
    set
  }
  public var stringValue: Swift.String {
    get
    set
  }
}
extension IMSdk.JSON {
  public var number: Foundation.NSNumber? {
    get
    set
  }
  public var numberValue: Foundation.NSNumber {
    get
    set
  }
}
extension IMSdk.JSON {
  public var null: Foundation.NSNull? {
    get
    set
  }
  public func exists() -> Swift.Bool
}
extension IMSdk.JSON {
  public var url: Foundation.URL? {
    get
    set
  }
}
extension IMSdk.JSON {
  public var double: Swift.Double? {
    get
    set
  }
  public var doubleValue: Swift.Double {
    get
    set
  }
  public var float: Swift.Float? {
    get
    set
  }
  public var floatValue: Swift.Float {
    get
    set
  }
  public var int: Swift.Int? {
    get
    set
  }
  public var intValue: Swift.Int {
    get
    set
  }
  public var uInt: Swift.UInt? {
    get
    set
  }
  public var uIntValue: Swift.UInt {
    get
    set
  }
  public var int8: Swift.Int8? {
    get
    set
  }
  public var int8Value: Swift.Int8 {
    get
    set
  }
  public var uInt8: Swift.UInt8? {
    get
    set
  }
  public var uInt8Value: Swift.UInt8 {
    get
    set
  }
  public var int16: Swift.Int16? {
    get
    set
  }
  public var int16Value: Swift.Int16 {
    get
    set
  }
  public var uInt16: Swift.UInt16? {
    get
    set
  }
  public var uInt16Value: Swift.UInt16 {
    get
    set
  }
  public var int32: Swift.Int32? {
    get
    set
  }
  public var int32Value: Swift.Int32 {
    get
    set
  }
  public var uInt32: Swift.UInt32? {
    get
    set
  }
  public var uInt32Value: Swift.UInt32 {
    get
    set
  }
  public var int64: Swift.Int64? {
    get
    set
  }
  public var int64Value: Swift.Int64 {
    get
    set
  }
  public var uInt64: Swift.UInt64? {
    get
    set
  }
  public var uInt64Value: Swift.UInt64 {
    get
    set
  }
}
extension IMSdk.JSON : Swift.Comparable {
}
public func == (lhs: IMSdk.JSON, rhs: IMSdk.JSON) -> Swift.Bool
public func <= (lhs: IMSdk.JSON, rhs: IMSdk.JSON) -> Swift.Bool
public func >= (lhs: IMSdk.JSON, rhs: IMSdk.JSON) -> Swift.Bool
public func > (lhs: IMSdk.JSON, rhs: IMSdk.JSON) -> Swift.Bool
public func < (lhs: IMSdk.JSON, rhs: IMSdk.JSON) -> Swift.Bool
public enum writingOptionsKeys {
  case jsonSerialization
  case castNilToNSNull
  case maxObjextDepth
  case encoding
  public static func == (a: IMSdk.writingOptionsKeys, b: IMSdk.writingOptionsKeys) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension IMSdk.JSON : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum TMNetError : Swift.Int {
  case NO_NETWORKING
  case NETWORKING_TIME_OUT
  case TOKEN_ERROR
  case COMMON_ERROR
  case RELATION_DELETE_ME
  case RELATION_DELETE_OTHER
  case RELATION_DELETE_BOTH
  case GROUP_NOT_IN
  case MOMENT_COMMENT_ERROR_WITH_DELETE
  case SERVER_DB_ERROR
  case SERVER_COMMON_ERROR
  case RELATION_BLOCK_BY_ME
  case RELATION_BLOCK_BY_USER
  case RELATION_BLOCK_EACH_OTHER
  case DELETE_ACCOUNT
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class YHGenerated : ObjectiveC.NSObject {
  @objc public static func openIphoneSettings()
  @objc public static func openAppStore(with appID: Swift.String)
  @objc public static func openAppStoreReview(with appID: Swift.String)
  @objc public static func makeCall(with tel: Swift.String)
  @objc public static func openSafari(with url: Swift.String, autoCorrect: Swift.Bool = true)
  @objc public static func getLocalJSONFile(file fileName: Swift.String) -> Foundation.Data?
  @objc public static func getLocalPlistFile(file fileName: Swift.String) -> Foundation.Data?
  @objc override dynamic public init()
  @objc deinit
}
extension IMSdk.YHGenerated {
  public enum bundleType : Swift.String {
    case appVersion
    case buildID
    case bundleID
    case appName
    case statusBarStyle
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public static func getBundleInfo(with type: IMSdk.YHGenerated.bundleType) -> Swift.String
}
extension IMSdk.YHGenerated {
  @objc public static func fileSize(length: Swift.Int) -> Swift.String
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class TMNotificationManager : ObjectiveC.NSObject {
  @objc public static let shared: IMSdk.TMNotificationManager
  public typealias NoticeBlock = (_ object: Any?, _ userInfo: Any?) -> ()
  @objc public func observer(_ observer: ObjectiveC.NSObject, _ name: Swift.String, _ block: @escaping IMSdk.TMNotificationManager.NoticeBlock)
  @objc public func removeObserver(_ observer: ObjectiveC.NSObject)
  @objc deinit
}
@objc public class ConversationBaseModel : ObjectiveC.NSObject {
  public init(aChatId: Swift.String)
  @objc deinit
}
@objc public class ConversationSubTitle : IMSdk.ConversationBaseModel {
  public init(aChatId: Swift.String, subTitle: Swift.String)
  @objc deinit
}
@objc public class ConversationMarker : IMSdk.ConversationBaseModel {
  public init(aChatId: Swift.String, icon: Foundation.Data, format: Swift.String)
  @objc deinit
}
@objcMembers public class MessageModel : WCDBSwift.TableCodable, HandyJSON.HandyJSON, Swift.Hashable {
  public var id: Swift.Int?
  @objc public var mid: Swift.String
  @objc public var amid: Swift.String
  public var sequence: Swift.Int?
  @objc public var chatId: Swift.String
  @objc public var sender: Swift.String
  @objc public var status: Swift.Int
  public var type: Swift.Int?
  @objc public var content: Swift.String
  @objc public var extra: Swift.String?
  @objc public var createTime: Swift.Int
  @objc public var sendTime: Swift.Int
  @objc public var displayTime: Swift.Int
  public var isDel: Swift.Int?
  @objc public var isRead: Swift.Int
  @objc public var action: Swift.String
  @objc public var mention: Swift.Int
  @objc public var isViewed: Swift.Int
  @objc public var isLocal: Swift.Int
  public enum CodingKeys : Swift.String, WCDBSwift.CodingTableKey {
    public typealias Root = IMSdk.MessageModel
    public static let objectRelationalMapping: WCDBSwift.TableBinding<IMSdk.MessageModel.CodingKeys>
    case id
    case mid
    case amid
    case sequence
    case chatId
    case sender
    case status
    case type
    case content
    case extra
    case createTime
    case sendTime
    case displayTime
    case isDel
    case isRead
    case action
    case mention
    case isViewed
    case isLocal
    public static var columnConstraintBindings: [IMSdk.MessageModel.CodingKeys : WCDBSwift.ColumnConstraintBinding]? {
      get
    }
    public static var indexBindings: [WCDBSwift.IndexBinding.Subfix : WCDBSwift.IndexBinding]? {
      get
    }
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func mapping(mapper: HandyJSON.HelpingMapper)
  @objc required public init()
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: IMSdk.MessageModel, rhs: IMSdk.MessageModel) -> Swift.Bool
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers open class MMKVUtils : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public let TMLanguageSettingKey: Swift.String
@objc public enum TMLanguageSettingType : Swift.Int {
  case auto
  case en
  case tr
  case fr
  case zh_hans
  case ja
  case ko
  case zh_hant
  case it
  case id
  case de
  case da
  case cs
  case ms
  case hu
  case es
  case sw
  case fi
  case ar
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class TMLanguage : ObjectiveC.NSObject {
  @objc public var languageType: IMSdk.TMLanguageSettingType
  @objc public var showTag: Swift.String
  @objc public var systemTag: Swift.String
  @objc public var serverTag: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension IMSdk.TMLanguage {
  @objc public static func getCurrentUserLanguageType() -> IMSdk.TMLanguageSettingType
  @objc public static func getCurrentUserLanguageValues(languageType: IMSdk.TMLanguageSettingType) -> Swift.String
  @objc public static func setUserLanguage(type: IMSdk.TMLanguageSettingType, userID: Swift.String?)
  @objc public static func setLanguage(lan: Swift.String)
  @objc public static func resetUserLanguage()
  @objc public static func getCurrentLanguage(systemTag: Swift.String) -> Swift.String
  @objc public static func getTrueLanguageTypeString() -> Swift.String
}
extension IMSdk.TMLanguage {
  @objc public static func isChinese() -> Swift.Bool
  @objc public static func isTurkey() -> Swift.Bool
  @objc public static func availableLanguages() -> [IMSdk.TMLanguage]
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TMSystemNoticeContentVo : ObjectiveC.NSObject, HandyJSON.HandyJSON {
  @objc public var titleHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc public var descHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc override required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TMPageLoadContainLastMsg : ObjectiveC.NSObject, IMSdk.TMChatDetailMessageDisplay {
  @objc public func performMsgEventData(eventMids: [Swift.String], sourceData: [[IMSdk.TMMessageModel]], eventMsgArr: [IMSdk.TmMessage]?) -> [IMSdk.TMMessageModel]
  @objc public func msgEventChangeUI(tableView: UIKit.UITableView, chatId: Swift.String, eventMsgArr: [IMSdk.TmMessage]?)
  @objc override dynamic public init()
  @objc deinit
}
extension AsyncDisplayKit.ASEditableTextNode : RxCocoa.HasDelegate {
  public typealias Delegate = AsyncDisplayKit.ASEditableTextNodeDelegate
}
open class RxASEditableTextNodeDelegateProxy : RxCocoa.DelegateProxy<AsyncDisplayKit.ASEditableTextNode, AsyncDisplayKit.ASEditableTextNodeDelegate>, RxCocoa.DelegateProxyType, AsyncDisplayKit.ASEditableTextNodeDelegate {
  weak public var editableTextNode: AsyncDisplayKit.ASEditableTextNode? {
    get
  }
  public init(editableTextNode: AsyncDisplayKit.ASEditableTextNode)
  public static func registerKnownImplementations()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TmConversationManager : ObjectiveC.NSObject {
  @objc public static var `default`: IMSdk.TmConversationManager
  @objc public func getConversation(chatIds: [Swift.String]) -> [IMSdk.TmConversationInfo]
  @objc public func loadConversation(lastTimestamp: Swift.Int, count: Swift.Int) -> [IMSdk.TmConversationInfo]
  @objc public func hideConversation(chatId: Swift.String, block: () -> Swift.Void)
  @objc public func newHideConversation(chatId: Swift.String, isSingle: Swift.Bool, complete: ((_ error: Swift.Error?) -> Swift.Void)?)
  @objc public func markRead(chatId: Swift.String, isRead: Swift.Int = 1)
  @objc public func ReadReceipt(chatId: Swift.String)
  @objc public func updateSingleChatTop(chatId: Swift.String, isTop: Swift.Int, isGroup: Swift.Bool, complete: ((_ error: Swift.Error?, _ topTime: Swift.Int) -> Swift.Void)?)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TMChatMenuBgView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
@objc @objcMembers public class TMChatMenu : ObjectiveC.NSObject {
  @objc final public let title: Swift.String
  @objc final public let image: UIKit.UIImage
  @objc final public let selectedBlock: (() -> ())
  @objc public init(title: Swift.String, image: UIKit.UIImage, selectedBlock: @escaping () -> ())
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class TMChatMenuAlertView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public init(isLeft: Swift.Bool, minLocation: CoreFoundation.CGFloat, maxLocation: CoreFoundation.CGFloat, menus: [IMSdk.TMChatMenu])
  @objc @_Concurrency.MainActor(unsafe) public func show()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class ConversationView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) public func setDelegate(delegate: IMSdk.ConversationDelegate)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension IMSdk.ConversationView : IMSdk.ChannelListCheckDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didSelectAchatId(_ aChatId: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class TMImageBrowserView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var clickPanGestureCloseVC: (() -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) public var screenImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension IMSdk.TMImageBrowserView : IMSdk.BrowserCheckDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func panGestureCloseVC()
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class IMSdk : ObjectiveC.NSObject {
  @objc public static var shared: IMSdk.IMSdk?
  @objc public static func getInstance(ak: Swift.String, env: IMSdk.IMEnvironmentType, deviceId: Swift.String) -> IMSdk.IMSdk
  @objc weak public var delegate: IMSdk.IMDelegate?
  @objc public func initUser(aUid: Swift.String)
  @objc public func setIMDelegate(delegate: IMSdk.IMDelegate)
  @objc public func setAuthCode(auth: Swift.String)
  @objc public func createChat(aChatId: Swift.String, chatName: Swift.String, auids: [Swift.String], success: (() -> ())?, fail: ((Swift.String) -> ())?)
  @objc public func sendTextMessage(aChatId: Swift.String, aMid: Swift.String, content: Swift.String)
  @objc public func sendImageMessage(aChatId: Swift.String, aMid: Swift.String, data: Foundation.Data, format: Swift.String, isOrigin: Swift.Bool = true)
  @objc public func sendAttachmentMessage(aChatId: Swift.String, aMid: Swift.String, data: Foundation.Data, fileName: Swift.String, format: Swift.String)
  @objc public func sendCardMessage(aChatId: Swift.String, aMid: Swift.String, msg: IMSdk.CardMessage)
  @objc public func disableCardMessage(aMid: Swift.String, buttonIds: [Swift.String])
  @objc public func createConversationViewModel(selector: IMSdk.TMConversionSelector) -> IMSdk.TMConversionViewModel
  @objc public func creatChatView(aChatId: Swift.String) -> IMSdk.ChatView
  @objc public func creatImageBrowserView(chatId: Swift.String, currentIndex: Swift.Int) -> IMSdk.TMImageBrowserView
  @objc public func getConversions() -> [IMSdk.TmConversationInfo]
  @objc public func getMassages(aChatId: Swift.String) -> [IMSdk.TmMessage]
  @objc public func joinTestGroup(success: ((Swift.String) -> ())?, fail: ((Swift.String) -> ())?)
  @objc public func setConversation(aChatId: Swift.String, isMute: Swift.Bool)
  @objc public func startSocket()
  @objc public func setUserInfo(userInfos: [IMSdk.UserInfoModel], complete: ((Swift.Int) -> ())?)
  @objc public func setConversationSubTitle(subTitles: [IMSdk.ConversationSubTitle])
  @objc public func setConversationMarker(markers: [IMSdk.ConversationMarker])
  @objc public func loginOut()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TMEmojiTool : ObjectiveC.NSObject {
  @objc public static let `default`: IMSdk.TMEmojiTool
  @objc public func getFaceAttachments() -> [IMSdk.TMFaceAttachment]
  public func getLastFaceAttachment(with text: Swift.String) -> Foundation.NSRange?
  @objc public func preGetUserFaceHistory()
  @objc public func clickFaceCode(code: Swift.String)
  @objc public func getHistroyFace() -> [IMSdk.TMFaceAttachment]
  @objc public func converStr(str: Swift.String, replaceString: Swift.String = "&") -> Swift.String
  @objc public func transformAttachmentsAttributedString(with text: Swift.String, font: UIKit.UIFont, imageSize: CoreFoundation.CGSize) -> Foundation.NSAttributedString
  @objc public func transformAttachmentsAttributedStringOther(with text: Swift.String, font: UIKit.UIFont, imageSize: CoreFoundation.CGSize) -> Foundation.NSAttributedString
  @objc public func createAttachmentsAttributedString(attachment: IMSdk.TMFaceAttachment, font: UIKit.UIFont, imageSize: CoreFoundation.CGSize) -> Foundation.NSAttributedString
  @objc public func forwardtransformContactAttributedString(with text: Swift.String, font: UIKit.UIFont, color: UIKit.UIColor) -> Foundation.NSMutableAttributedString
  @objc public static func fileTypeImage(fileType: Swift.String) -> UIKit.UIImage?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Thread : Foundation.Thread {
  public func postBack(_ task: @escaping () -> Swift.Void)
  public func setRunner(_ main: @escaping () -> Swift.Void) -> IMSdk.Thread
  @objc override dynamic public func main()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class TMCustomizeCell : UIKit.UITableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public func setupModel(_ model: IMSdk.TMMessageModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
extension Swift.String {
  public var yh_jsonDecode: Any? {
    get
  }
  public static func random(_ count: Swift.Int) -> Swift.String
  public static func randomNumString(_ count: Swift.Int) -> Swift.String
  public static func convertValueString(format: Swift.String, values: [Swift.String]) -> Swift.String
}
extension RxSwift.Reactive where Base : AsyncDisplayKit.ASButtonNode {
  public var attributedText: IMSdk.ASBinder<Foundation.NSAttributedString?> {
    get
  }
  public func attributedText(_ controlState: UIKit.UIControl.State) -> IMSdk.ASBinder<Foundation.NSAttributedString?>
  public func text(_ attribute: [Foundation.NSAttributedString.Key : Any]?) -> IMSdk.ASBinder<Swift.String?>
  public func text(_ attribute: [Foundation.NSAttributedString.Key : Any]?, target: UIKit.UIControl.State) -> IMSdk.ASBinder<Swift.String?>
  public func text(applyList: [RxSwift.Reactive<Base>.ASControlStateType]) -> IMSdk.ASBinder<Swift.String?>
  public var image: IMSdk.ASBinder<UIKit.UIImage?> {
    get
  }
  public var backgroundImage: IMSdk.ASBinder<UIKit.UIImage?> {
    get
  }
  public func image(applyList: [RxSwift.Reactive<Base>.ASControlStateType]) -> IMSdk.ASBinder<UIKit.UIImage?>
  public func backgroundImage(applyList: [RxSwift.Reactive<Base>.ASControlStateType]) -> IMSdk.ASBinder<UIKit.UIImage?>
  public enum ASControlStateType {
    case normal(Any?)
    case highlighted(Any?)
    case disabled(Any?)
    case selected(Any?)
  }
}
public enum IMLanguageType : Swift.String {
  case Arab
  case SimplifiedChinese
  case Czech
  case Danish
  case German
  case Greek
  case English
  case Spain
  case Finnish
  case Pilipino
  case French
  case Hun
  case Indonesia
  case Iceland
  case Italy
  case Japanese
  case Korean
  case Lithuanian
  case Malay
  case Norwegian
  case Dutch
  case Poland
  case Brasil
  case Romania
  case Russia
  case Slovinkina
  case Slovenian
  case Swedish
  case Thai
  case Turkish
  case Ukrainian
  case Vietnamese
  case TraditionalChinese
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class UnReadNumEvent : ObjectiveC.NSObject, IMSdk.TMEvent {
  @objc public func getData() -> [Swift.String]
  @objc public func getName() -> Swift.String
  @objc public var chatIds: [Swift.String]
  @objc public var unReadNum: Swift.Int
  @objc public static func send(chatIds: Swift.Array<Swift.String>)
  @objc override dynamic public init()
  @objc deinit
}
public protocol MMCodable : Swift.Decodable, Swift.Encodable {
  init()
  mutating func mapping(_ json: IMSdk.JSON)
}
extension IMSdk.MMCodable {
  public mutating func mapping(_ json: IMSdk.JSON)
}
@_hasMissingDesignatedInitializers public class ApiNoTokenService {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class SwipeActionView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) final public let action: IMSdk.SwipeAction
  @_Concurrency.MainActor(unsafe) weak public var delegate: IMSdk.SwipeActionViewDelegate?
  @objc @_Concurrency.MainActor(unsafe) public func setupSwipeActionView()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class FileDownloadEvent : ObjectiveC.NSObject, IMSdk.TMEvent {
  @objc public func getData() -> [Swift.String]
  @objc public func getName() -> Swift.String
  @objc public var objectIds: [Swift.String]
  @objc public static func send(objectIds: [Swift.String])
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TmUserManager : ObjectiveC.NSObject {
  @objc public static func getUserInfo(uid: Swift.String) -> IMSdk.TmUserInfo?
  @objc public static func getUserInfos(uids: [Swift.String]) -> [IMSdk.TmUserInfo]
  @objc public static func refreshUserInfosList(uids: [Swift.String])
  @objc override dynamic public init()
  @objc deinit
}
public let THUMB_AVATAR_WIDTH: Swift.Int
public let THUMB_AVATAR_HEIGHT: Swift.Int
public struct FileProgressDao {
}
public typealias DatasBlok = ([IMSdk.BrowserVo]) -> ()
public typealias DataBlock = (IMSdk.BrowserVo) -> ()
public typealias NumberBlock = (Swift.Int) -> ()
public typealias BoolBlock = (Swift.Bool) -> ()
@objc public protocol BrowserProtocol {
  @objc func nextStep()
  @objc func previousStep()
  @objc func allDatas(block: @escaping IMSdk.DatasBlok)
  @objc func currentAttachment(block: @escaping IMSdk.DataBlock)
  @objc func nextAttachment(block: @escaping IMSdk.DataBlock)
  @objc func previousAttachment(block: @escaping IMSdk.DataBlock)
  @objc func totalCount(block: @escaping IMSdk.NumberBlock)
  @objc func currentPageNumber(block: @escaping IMSdk.NumberBlock)
  @objc func hasNext(block: @escaping IMSdk.BoolBlock)
  @objc func hasPrevious(block: @escaping IMSdk.BoolBlock)
  @objc func originalPath(browserVo: IMSdk.BrowserVo) -> Swift.String
  @objc func normalPath(browserVo: IMSdk.BrowserVo) -> Swift.String
  @objc func thumPath(browserVo: IMSdk.BrowserVo) -> Swift.String
  @objc func forwardCurrent()
}
public protocol BrowserChatProtocol : IMSdk.BrowserProtocol {
}
extension RxSwift.Reactive where Base : AsyncDisplayKit.ASEditableTextNode {
  public var delegate: RxCocoa.DelegateProxy<AsyncDisplayKit.ASEditableTextNode, AsyncDisplayKit.ASEditableTextNodeDelegate> {
    get
  }
  public var attributedText: RxCocoa.ControlProperty<Foundation.NSAttributedString?> {
    get
  }
  public func text(_ attributes: [Foundation.NSAttributedString.Key : Any]?) -> IMSdk.ASBinder<Swift.String?>
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TmFileProgressManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TMNetworkingError : Swift.Error {
  @objc deinit
}
extension RxSwift.Reactive where Base : AsyncDisplayKit.ASDisplayNode {
  public var alpha: IMSdk.ASBinder<CoreFoundation.CGFloat> {
    get
  }
  public var backgroundColor: IMSdk.ASBinder<UIKit.UIColor?> {
    get
  }
  public var didLoad: RxSwift.Observable<Swift.Void> {
    get
  }
  public var isHidden: IMSdk.ASBinder<Swift.Bool> {
    get
  }
  public var isUserInteractionEnabled: IMSdk.ASBinder<Swift.Bool> {
    get
  }
  public var setNeedsLayout: RxSwift.Binder<Swift.Void> {
    get
  }
}
extension RxSwift.Reactive where Base : AsyncDisplayKit.ASDisplayNode {
  public var didEnterPreloadState: RxCocoa.ControlEvent<Swift.Void> {
    get
  }
  public var didEnterDisplayState: RxCocoa.ControlEvent<Swift.Void> {
    get
  }
  public var didEnterVisibleState: RxCocoa.ControlEvent<Swift.Void> {
    get
  }
  public var didExitVisibleState: RxCocoa.ControlEvent<Swift.Void> {
    get
  }
  public var didExitDisplayState: RxCocoa.ControlEvent<Swift.Void> {
    get
  }
  public var didExitPreloadState: RxCocoa.ControlEvent<Swift.Void> {
    get
  }
}
extension RxSwift.Reactive where Base : AsyncDisplayKit.ASDisplayNode {
  public var width: IMSdk.ASBinder<AsyncDisplayKit.ASDimension> {
    get
  }
  public var minWidth: IMSdk.ASBinder<AsyncDisplayKit.ASDimension> {
    get
  }
  public var maxWidth: IMSdk.ASBinder<AsyncDisplayKit.ASDimension> {
    get
  }
  public var height: IMSdk.ASBinder<AsyncDisplayKit.ASDimension> {
    get
  }
  public var minHeight: IMSdk.ASBinder<AsyncDisplayKit.ASDimension> {
    get
  }
  public var maxHeight: IMSdk.ASBinder<AsyncDisplayKit.ASDimension> {
    get
  }
  public var preferredSize: IMSdk.ASBinder<CoreFoundation.CGSize> {
    get
  }
  public var minSize: IMSdk.ASBinder<CoreFoundation.CGSize> {
    get
  }
  public var maxSize: IMSdk.ASBinder<CoreFoundation.CGSize> {
    get
  }
}
extension AsyncDisplayKit.ASDisplayNode {
  public func rx_setNeedsLayout()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class ChatView : UIKit.UIView {
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) public func setDelegate(delegate: IMSdk.ChatDelegate)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
}
extension IMSdk.ChatView : IMSdk.ChatDetailCheckDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func getCustomView(_ amid: Swift.String!, body: Swift.String!, handleCustomView handle: ((UIKit.UIView?) -> Swift.Void)!, tapCustomView tap: ((UIKit.UIView?) -> Swift.Void)!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tapCardButonIndexPath(_ amid: Swift.String!, buttonId: Swift.String!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tapfile(atIndexPath mid: Swift.String!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tapImage(atIndexPath chatId: Swift.String!, messageId: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func getMessageUnReadCount(_ count: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tapMessageText(_ amid: Swift.String!, tempId: Swift.String!, textId: Swift.String!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func clickTxtNoticeCardIndexPath(_ amid: Swift.String!, buttonId: Swift.String!)
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class TMSectionTimeLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class TMChatDetailTimeGroupView : UIKit.UITableViewHeaderFooterView {
  @objc @_Concurrency.MainActor(unsafe) public func setTime(time: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class BrowserVo : ObjectiveC.NSObject {
  @objc public var attachment: IMSdk.AvatarModel
  @objc public var posterAttachment: IMSdk.AvatarModel
  @objc public var isOrigin: Swift.Int
  @objc public var size: Swift.Int
  @objc public var duration: Swift.Int
  @objc public var attachmentType: Swift.Int
  @objc public var isGif: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
public typealias FileTransferSuccess = (_ path: Swift.String) -> Swift.Void
public typealias FileTransferFailed = (_ error: Swift.Error) -> Swift.Void
public typealias FileTransferProgress = (_ id: Swift.String, _ progress: Swift.Int) -> Swift.Void
public typealias CancleTaskSuccess = () -> Swift.Void
open class MMJSONDecoder {
  public enum NotFoundKeyOrValueDecodingStrategy {
    case MMDefaultValue
    case customDefaultValue(IMSdk.MMJSONDefault)
  }
  public enum DateDecodingStrategy {
    case deferredToDate
    case secondsSince1970
    case millisecondsSince1970
    @available(macOS 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
    case iso8601
    case formatted(Foundation.DateFormatter)
    case custom((_ decoder: Swift.Decoder) throws -> Foundation.Date)
  }
  public enum DataDecodingStrategy {
    case deferredToData
    case base64
    case custom((_ decoder: Swift.Decoder) throws -> Foundation.Data)
  }
  public enum NonConformingFloatDecodingStrategy {
    case `throw`
    case convertFromString(positiveInfinity: Swift.String, negativeInfinity: Swift.String, nan: Swift.String)
  }
  public enum KeyDecodingStrategy {
    case useDefaultKeys
    case convertFromSnakeCase
    case custom((_ codingPath: [Swift.CodingKey]) -> Swift.CodingKey)
  }
  open var dateDecodingStrategy: IMSdk.MMJSONDecoder.DateDecodingStrategy
  open var dataDecodingStrategy: IMSdk.MMJSONDecoder.DataDecodingStrategy
  open var nonConformingFloatDecodingStrategy: IMSdk.MMJSONDecoder.NonConformingFloatDecodingStrategy
  open var keyDecodingStrategy: IMSdk.MMJSONDecoder.KeyDecodingStrategy
  open var userInfo: [Swift.CodingUserInfoKey : Any]
  open var notFoundKeyOrValueDecodingStrategy: IMSdk.MMJSONDecoder.NotFoundKeyOrValueDecodingStrategy
  public init()
  open func decode<T>(_ type: T.Type, from data: Foundation.Data) throws -> T where T : Swift.Decodable
  @objc deinit
}
@objc public protocol SwipeTableViewCellDelegate {
  @objc optional func swipeTableViewCell(_ cell: IMSdk.SwipeTableViewCell, shouldStartSwipeForDirection direction: IMSdk.SwipeDirection) -> Swift.Bool
  @objc optional func swipeTableViewCell(_ cell: IMSdk.SwipeTableViewCell, willStartSwipeForDirection direction: IMSdk.SwipeDirection)
  @objc optional func swipeTableViewCell(_ cell: IMSdk.SwipeTableViewCell, didEndSwipeForDirection direction: IMSdk.SwipeDirection)
}
@objc @_inheritsConvenienceInitializers public class Async : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public func run(_ runner: @escaping () -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class TMChatListCell : IMSdk.SwipeTableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public var tmInfo: IMSdk.TmConversationInfo!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) public func ChangeLineViewHeight(isChange: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func changeBackgroundColor(color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public func getTmInfo(tmInfo: IMSdk.TmConversationInfo)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
extension RxSwift.Reactive where Base : AsyncDisplayKit.ASNetworkImageNode {
  public var url: IMSdk.ASBinder<Foundation.URL?> {
    get
  }
  public func url(resetToDefault: Swift.Bool) -> IMSdk.ASBinder<Foundation.URL?>
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ConversationEvent : ObjectiveC.NSObject, IMSdk.TMEvent {
  @objc public func getData() -> [Swift.String]
  @objc public func getName() -> Swift.String
  @objc public var chatIds: [Swift.String]
  @objc public static func send(chatIds: Swift.Array<Swift.String>)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TMNetCore {
  public static let shared: IMSdk.TMNetCore
  public func apiCore(net: IMSdk.TMNet, path: Swift.String, method: Alamofire.HTTPMethod = .post, parameters: [Swift.String : Any]? = nil) -> IMSdk.Promise<Swift.String>
  public func apiNoTokenCore(net: IMSdk.TMNet, path: Swift.String, method: Alamofire.HTTPMethod = .post, parameters: [Swift.String : Any]?) -> IMSdk.Promise<Swift.String>
  @objc deinit
}
@objc public protocol TMEvent : ObjectiveC.NSObjectProtocol {
  @objc func getData() -> [Swift.String]
  @objc func getName() -> Swift.String
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TmManager : ObjectiveC.NSObject {
  @objc public static let `default`: IMSdk.TmManager
  public func syncNew(sequence: Swift.Int? = nil, sendEvent: Swift.Bool = true)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TmConversationInfo : ObjectiveC.NSObject, HandyJSON.HandyJSON {
  @objc public var chatId: Swift.String?
  @objc public var uid: Swift.String?
  @objc public var lastMid: Swift.String?
  @objc public var timeStamp: Swift.Int
  @objc public var isMute: Swift.Int
  @objc public var isMuteShow: Swift.Bool
  @objc public var qrCodeUrl: Swift.String?
  @objc public var headIndex: Swift.Int
  @objc public var isHide: Swift.Bool
  @objc public var name: Swift.String?
  @objc public var avatar: Swift.String?
  @objc public var unReadCount: Swift.Int
  @objc public var lastTmMessage: IMSdk.TmMessage?
  @objc public var aChatId: Swift.String
  @objc public var conversationType: Swift.Int
  @objc public var folderDes: Swift.String
  @objc public var folderChatIds: [Swift.String]
  @objc public var subTitle: Swift.String?
  @objc public var marker: IMSdk.AvatarModel?
  @objc public var groupMemberCount: Swift.Int
  @objc public var hideSequence: Swift.Int
  @objc public var avatarInfo: IMSdk.AvatarModel?
  @objc public var hadMeeting: Swift.Bool
  @objc public var hadAt: Swift.Bool
  @objc public var notice: Swift.String
  @objc public var noticeIsRead: Swift.Bool
  @objc public var attributedText: Foundation.NSMutableAttributedString?
  @objc public var timeString: Swift.String?
  @objc public var groupSenderName: Swift.String
  @objc public var noticeContent: Swift.String
  @objc public var isTop: Swift.Int
  @objc public var topTimeStamp: Swift.Int
  @objc public var init_count: Swift.Int
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc required override dynamic public init()
  @objc public var lastMessageTitle: Swift.String {
    @objc get
    @objc set
  }
  @objc deinit
}
public let IS_MUTE: Swift.Int
public let IS_NOT_MUTE: Swift.Int
public let IS_TOP: Swift.Int
public let IS_NOT_TOP: Swift.Int
@_hasMissingDesignatedInitializers public class NetFactory {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AwsService {
  @objc deinit
}
extension Swift.Array {
  public var yh_jsonEnCode: Swift.String? {
    get
  }
}
extension Swift.Array {
  public func yh_group<T>(perRowCount: Swift.Int) -> [[T]] where Element : ObjectiveC.NSObject, T : ObjectiveC.NSObject
}
extension Swift.Array {
  public func yh_shuffle() -> Swift.Array<Element>
}
extension RxSwift.Reactive where Base : AsyncDisplayKit.ASTextNode {
  public var attributedText: IMSdk.ASBinder<Foundation.NSAttributedString?> {
    get
  }
  public func text(_ attributes: [Foundation.NSAttributedString.Key : Any]?) -> IMSdk.ASBinder<Swift.String?>
}
@_inheritsConvenienceInitializers @objc public class TMSwiftOcBridge : ObjectiveC.NSObject {
  @objc public static let shared: IMSdk.TMSwiftOcBridge
  @objc public static let TMLanguageChangeNotification: Swift.String
  @objc public var languageChangedClosure: ((_ currentLanguage: Swift.String) -> ())?
  @objc override dynamic public init()
  @objc deinit
}
@objc extension IMSdk.TMSwiftOcBridge {
  @objc dynamic public func setCurrentLanguage(language: Swift.String)
  @objc dynamic public func currentLanguage() -> Swift.String
  @objc dynamic public func localized(key: Swift.String) -> Swift.String?
}
@objc extension IMSdk.TMSwiftOcBridge {
  @objc dynamic public func textViewLimit(with textView: UIKit.UITextView, maxLength: Swift.Int)
  @objc dynamic public func textFieldLimit(with textField: UIKit.UITextField, maxLength: Swift.Int)
  @objc dynamic public func transformTurkishInputDecimalSeparator(textField: UIKit.UITextField)
  @objc dynamic public func validateNumberInput(textField: UIKit.UITextField, shouldChangeCharactersInRange: Foundation.NSRange, replacementString: Swift.String, decimalNumberCount: Swift.Int, maxNumber: Swift.String) -> Swift.Bool
}
@objc extension IMSdk.TMSwiftOcBridge {
  @objc public static func randomString(_ count: Swift.Int) -> Swift.String
  @objc dynamic public func generateIv() -> Swift.String
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TMCardMessageContentVo : ObjectiveC.NSObject, HandyJSON.HandyJSON {
  @objc public var icon: IMSdk.AvatarModel?
  @objc public var text: [IMSdk.TextVo]
  @objc public var buttons: [IMSdk.ButtonVo]
  @objc final public let fontSize: CoreFoundation.CGFloat
  @objc public var textAttr: Foundation.NSMutableAttributedString {
    @objc get
    @objc set
  }
  @objc public var textAttrSize: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @objc required override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TextVo : ObjectiveC.NSObject, HandyJSON.HandyJSON {
  @objc public var t: Swift.String
  @objc public var value: Swift.String
  @objc public var color: Swift.String
  @objc required override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ButtonVo : ObjectiveC.NSObject, HandyJSON.HandyJSON {
  @objc public var txt: Swift.String
  @objc public var enableColor: Swift.String
  @objc public var disableColor: Swift.String
  @objc public var buttonId: Swift.String
  @objc required override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TMSelectAtModel : ObjectiveC.NSObject {
  @objc public var atId: Swift.String
  @objc public var name: Swift.String
  @objc public func nameContainAt() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol TMChatDetailProtocol : IMSdk.TMChatDetailMessageDisplay {
}
@objc public protocol TMChatDetailMessageDisplay {
  @objc func performMsgEventData(eventMids: [Swift.String], sourceData: [[IMSdk.TMMessageModel]], eventMsgArr: [IMSdk.TmMessage]?) -> [IMSdk.TMMessageModel]
  @objc func msgEventChangeUI(tableView: UIKit.UITableView, chatId: Swift.String, eventMsgArr: [IMSdk.TmMessage]?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class FilePreView : UIKit.UIView, UIKit.UIDocumentInteractionControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension IMSdk.FilePreView : QuickLook.QLPreviewControllerDelegate, QuickLook.QLPreviewControllerDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfPreviewItems(in controller: QuickLook.QLPreviewController) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func previewController(_ controller: QuickLook.QLPreviewController, previewItemAt index: Swift.Int) -> QuickLook.QLPreviewItem
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class TMLoginSuccessEvent : ObjectiveC.NSObject, IMSdk.TMEvent {
  @objc override dynamic public init()
  @objc public func getData() -> [Swift.String]
  @objc public func getName() -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TmImageUrlParse : ObjectiveC.NSObject, HandyJSON.HandyJSON {
  @objc public var bucketId: Swift.String
  @objc public var format: Swift.String
  @objc public var objectId: Swift.String
  @objc public var thumbWidth: Swift.Int
  @objc public var thumbHeight: Swift.Int
  @objc required override dynamic public init()
  @objc public static func create(url: Swift.String) -> IMSdk.TmImageUrlParse
  @objc public func getFileFullName() -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TMTransferLogic : ObjectiveC.NSObject {
  @objc public static func startDownload(objectID: Swift.String, bucketId: Swift.String, sourceSence: Swift.Int, isNeedNotice: Swift.Int)
  @objc public static func queryProgressValueWithEvent(objectId: Swift.String) -> Swift.Int
  @objc public static func queryProgressValueNormal(objectId: Swift.String) -> Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
public func startUpload(objectID: Swift.String, bucketId: Swift.String) -> IMSdk.Promise<(uploadSuccess: Swift.Bool, realBucketId: Swift.String?)>
public protocol SwipeActionViewDelegate : AnyObject {
  func swipeActionView(actionView: IMSdk.SwipeActionView, didTap action: IMSdk.SwipeAction)
}
@objc @objcMembers public class SwipeAction : ObjectiveC.NSObject {
  @objc public var title: Swift.String
  @objc public var textColor: UIKit.UIColor
  @objc public var font: UIKit.UIFont
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var image: UIKit.UIImage?
  @objc public var imageSize: CoreFoundation.CGFloat
  @objc final public let handler: (IMSdk.SwipeAction, Foundation.IndexPath?) -> Swift.Void
  @objc public init(handler: @escaping (IMSdk.SwipeAction, Foundation.IndexPath?) -> Swift.Void)
  @objc deinit
}
@objc public protocol ConversationDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func onItemClick(aChatId: Swift.String)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TmMessageContent : ObjectiveC.NSObject, HandyJSON.HandyJSON {
  @objc public var text: Swift.String
  @objc public var isOrigin: Swift.Int
  @objc public var width: Swift.Int
  @objc public var height: Swift.Int
  @objc public var name: Swift.String?
  @objc public var size: Swift.Int
  @objc public var fileStatus: Swift.Int
  @objc public var duration: Swift.Int
  @objc public var type: Swift.Int
  @objc public var fileType: Swift.String
  @objc public var objectId: Swift.String
  @objc public var posterObjectId: Swift.String
  @objc public var videoPosterWidth: Swift.Int
  @objc public var videoPosterHeight: Swift.Int
  @objc public var videoPosterFileType: Swift.String
  @objc public var posterBucketId: Swift.String
  @objc public var imageThumbPath: Swift.String
  @objc public var imageOriginPath: Swift.String
  @objc public var imageNormalPath: Swift.String
  @objc public var filePath: Swift.String
  @objc public var posterFilePath: Swift.String
  @objc public var videoPath: Swift.String
  @objc public var voicePath: Swift.String
  @objc public var attachmentPath: Swift.String
  @objc public var thumbWidth: Swift.Int
  @objc public var thumbHeight: Swift.Int
  @objc public var callActionType: Swift.Int
  @objc public var callType: Swift.Int
  @objc public var callDuration: Swift.String
  @objc public var callOperatorId: Swift.String
  @objc public var bucketId: Swift.String
  @objc public var uid: Swift.String
  @objc public var momentId: Swift.String
  @objc public var appletName: Swift.String
  @objc public var appletDes: Swift.String
  @objc public var appletId: Swift.String
  @objc public var appletType: Swift.Int
  @objc public var logoBucketId: Swift.String
  @objc public var logoFileType: Swift.String
  @objc public var logoObjectId: Swift.String
  @objc public var iconBucketId: Swift.String
  @objc public var iconFileType: Swift.String
  @objc public var iconObjectId: Swift.String
  @objc public var logoFilePath: Swift.String
  @objc public var iconFilePath: Swift.String
  @objc public var dealId: Swift.String
  @objc public var amount: Swift.Int
  @objc public var totalAmount: Swift.Int
  @objc public var coinName: Swift.String
  @objc public var coinId: Swift.String
  @objc public var outTradeNo: Swift.String
  @objc public var act: Swift.Int
  @objc public var fromUid: Swift.String
  @objc public var toUid: Swift.String
  @objc public var createTime: Swift.Int
  @objc public var bizType: Swift.String
  @objc public var coinDecimal: Swift.Int
  @objc public var bless: Swift.String
  @objc public var recordID: Swift.String
  @objc public var luckUid: Swift.String
  @objc public var giftText: Swift.String
  @objc public var translateIos: Swift.String
  @objc public var translateIosStatus: Swift.Int
  @objc public var mtid: Swift.String
  @objc public var mt: Swift.Int
  @objc public var creator: Swift.String
  @objc public var stime: Swift.Int
  @objc public var etime: Swift.Int
  @objc public var res: Swift.Int
  @objc public var ctime: Swift.Int
  @objc public var atPersons: [IMSdk.TMSelectAtModel]
  @objc public var atTextContainUid: Swift.String
  @objc public var atTranslateTextContainUid: Swift.String
  @objc public var lon: Swift.String
  @objc public var lat: Swift.String
  @objc public var addr: Swift.String
  @objc public var desc: Swift.String
  @objc public var zoom: Swift.String
  @objc public var title: Swift.String
  @objc public var body: Swift.String
  @objc required override dynamic public init()
  @objc public func getFileId(busId: Swift.String) -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CardMessage : ObjectiveC.NSObject {
  public var icon: Foundation.Data?
  public var format: Swift.String
  public var text: [IMSdk.TextItem]
  public var buttons: [IMSdk.ButtonItem]
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TextItem : ObjectiveC.NSObject {
  public var t: Swift.String
  public var value: Swift.String
  public var color: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ButtonItem : ObjectiveC.NSObject {
  public var txt: Swift.String
  public var buttonId: Swift.String
  public var enableColor: Swift.String
  public var disableColor: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum TMTransferProgressState : Swift.Int {
  case failureMin = -100
  case start = 0
  case success = 100
  case fileNotExist = 404
  case wait = 600
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TMTransferSence : Swift.Int {
  case IM = 1
  case moments = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TMProjectConfig : ObjectiveC.NSObject {
  @objc public static func tmmPayId() -> Foundation.NSString
  @objc public static func atAllId() -> Swift.String
  @objc public static func getTextTypeKeyForAt() -> Swift.String
  @objc public static func getUidTypeKeyForAt() -> Swift.String
  @objc public static func localizable(value: Swift.String, placeholderArr: [Swift.String]) -> Swift.String
  @objc public static func minimumLongPressDuration() -> CoreFoundation.CGFloat
  @objc public static func chatInputTextMaxLength() -> Swift.Int
  @objc public static func chatGifMaxSize() -> Swift.Int
  @objc public static func chatImageMaxSize() -> Swift.Int
  @objc public static func chatVideoMaxSize() -> Swift.Int
  @objc public static func chatFileMaxSize() -> Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class TMCardLeftCell : IMSdk.TMCardBaseCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupModel(_ model: IMSdk.TMMessageModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TMActionSheetAlert : AsyncDisplayKit.ASDisplayNode {
  @objc deinit
}
extension IMSdk.TMActionSheetAlert {
  @objc override dynamic public func layoutSpecThatFits(_ constrainedSize: AsyncDisplayKit.ASSizeRange) -> AsyncDisplayKit.ASLayoutSpec
}
extension IMSdk.TMActionSheetAlert {
  @objc public static func show(_ actions: [IMSdk.TMAlertAction], willShowClosure: (() -> ())? = nil, didDismissClosure: (() -> ())? = nil)
  @objc public static func show(title: Foundation.NSMutableAttributedString?, actions: [IMSdk.TMAlertAction], willShowClosure: (() -> ())? = nil, didDismissClosure: (() -> ())? = nil)
  @objc public static func dismiss()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class MessageEvent : ObjectiveC.NSObject, IMSdk.TMEvent {
  @objc public func getData() -> [Swift.String]
  @objc public func getName() -> Swift.String
  @objc public var mids: [Swift.String]
  @objc public var chatId: Swift.String
  @objc public var datas: [Swift.String : [Swift.String]] {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension RxSwift.Reactive where Base : AsyncDisplayKit.ASControlNode {
  public func controlEvent(_ controlEvents: AsyncDisplayKit.ASControlNodeEvent) -> RxCocoa.ControlEvent<Base>
  public func controlProperty<T>(editingEvents: AsyncDisplayKit.ASControlNodeEvent, getter: @escaping (Base) -> T, setter: @escaping (Base, T) -> ()) -> RxCocoa.ControlProperty<T>
  public var tap: RxCocoa.ControlEvent<Swift.Void> {
    get
  }
  public func tap(to relay: RxRelay.PublishRelay<()>) -> RxSwift.Disposable
  public var isHidden: IMSdk.ASBinder<Swift.Bool> {
    get
  }
  public var isEnabled: IMSdk.ASBinder<Swift.Bool> {
    get
  }
  public var isHighlighted: RxCocoa.ControlProperty<Swift.Bool> {
    get
  }
  public var isSelected: IMSdk.ASBinder<Swift.Bool> {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class FileUploadProgress : ObjectiveC.NSObject {
  @objc public static let shared: IMSdk.FileUploadProgress
  @objc public func initializeUploadDB()
  @objc public func updateUploadingProgress(objectId: Swift.String, progress: Swift.Int)
  @objc public func startProgress(objectId: Swift.String, progress: Swift.Int)
  @objc public func updateUploadFailureProgress(objectId: Swift.String)
  @objc public func updateProgressBucketID(objectId: Swift.String, bucketID: Swift.String)
  @objc public func deleteTask(objectId: Swift.String)
  @objc public func getProgress(objectId: Swift.String) -> Swift.Int
  @objc public func uploadTaskIsEmpty() -> Swift.Bool
  @objc public func getProgressBucketID(objectId: Swift.String) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum IMEnvironmentType : Swift.Int {
  case pro = 1
  case alpha = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension UIKit.UIDevice {
  @objc @_Concurrency.MainActor(unsafe) public static var YH_Width: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public static var YH_Height: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public static var YHMachineName: Swift.String {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public static func YHBasicDeviceInfo() -> Swift.String
  @objc @_Concurrency.MainActor(unsafe) public static var YH_Is_Fringe: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public static var YH_Nav_Height: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public static var YH_Fringe_Height: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public static var YH_Is_HomeIndicator: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public static var YH_Tabbar_Height: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public static var YH_HomeIndicator_Height: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public static var YH_SimulatorIsiPhoneX: Swift.Bool {
    @objc get
  }
}
extension UIKit.UIDevice {
  public enum YHDeviceMachineType : Swift.String {
    case iPhone_SE_2nd
    case iPhoneX_S_Max
    case iPhoneXS
    case iPhoneXR
    case iPhoneX
    case iPhone_11
    case iPhone_11_Pro
    case iPhone_11_Pro_Max
    case iPhone_12_Mini
    case iPhone_12
    case iPhone_12_Pro
    case iPhone_12_Pro_Max
    case iPhone_8_Plus
    case iPhone_8
    case iPhone_7_Plus
    case iPhone_7
    case iPhone_SE
    case iPhone_6s_Plus
    case iPhone_6s
    case iPhone_6_Plus
    case iPhone_6
    case iPhone_5s
    case iPhone_5c
    case iPhone_5
    case iPhone_4s
    case iPhone_4
    case iPhone_3GS
    case iPhone_3G
    case iPhone
    case iPod_touch_7th_generation
    case iPod_touch_6th_generation
    case iPod_touch_5th_generation
    case iPod_touch_4th_generation
    case iPod_touch_3rd_generation
    case iPod_touch_2nd_generation
    case iPod_touch_1st_generation
    case iPad
    case iPad_2
    case iPad_3rd_generation
    case iPad_4th_generation
    case iPad_Air
    case iPad_Air_2
    case iPad_Pro_12_9_inch
    case iPad_Pro_9_7_inch
    case iPad_5th_generation
    case iPad_Pro_12_9_inch_2nd_generation
    case iPad_Pro_10_5_inch
    case iPad_6th_generation
    case iPad_Pro_11_inch
    case iPad_Pro_12_9_inch_3rd_generation
    case iPad_Air_3rd_generation
    case iPad_mini
    case iPad_mini_2
    case iPad_mini_3
    case iPad_mini_4
    case iPad_mini_5th_generation
    case AirPods_1st_generation
    case AirPods_2nd_generation
    case Apple_TV_2nd_generation
    case Apple_TV_3rd_generation
    case Apple_TV_4th_generation
    case Apple_TV_4K
    case Apple_Watch_1st_generation
    case Apple_Watch_Series_1
    case Apple_Watch_Series_2
    case Apple_Watch_Series_3
    case Apple_Watch_Series_4
    case HomePod
    case simulator
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public static var YHMachineMap: [Swift.String : UIKit.UIDevice.YHDeviceMachineType]
}
@objc public class UserInfoModel : ObjectiveC.NSObject {
  public init(aUid: Swift.String, profile: IMSdk.UserProfile)
  @objc deinit
}
@objc public class UserProfile : ObjectiveC.NSObject {
  public init(avatar: Foundation.Data, format: Swift.String, name: Swift.String, avatarPath: Swift.String)
  @objc deinit
}
@objc public protocol TmMessageContentProtocol {
  @objc func decode() -> Swift.String
  @objc func getContentType() -> Swift.Int
  @objc func encode() -> IMSdk.TmMessageContent
  @objc func encode(message: IMSdk.TmMessage) -> IMSdk.TmMessageContent
}
public struct TmFileTransferStatus {
}
@objc public class TMAlertAction : ObjectiveC.NSObject {
  @objc deinit
  @objc final public let title: Swift.String
  @objc final public let font: UIKit.UIFont
  @objc public var color: UIKit.UIColor
  @objc final public let isAutoDismiss: Swift.Bool
  @objc final public let actionClosure: (() -> ())?
  @objc required public init(title: Swift.String, font: UIKit.UIFont = UIFont.boldSystemFont(ofSize: 18), color: UIKit.UIColor, isAutoDismiss: Swift.Bool = true, actionClosure: (() -> ())? = nil)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TMPathManager : ObjectiveC.NSObject {
  @objc public static let shared: IMSdk.TMPathManager
  @objc public func isFileExists(filePath: Swift.String) -> Swift.Bool
  @objc public func getHomeDirectoryExists() -> Swift.String
  @objc public func fileCacheDirectory(filePath: Swift.String) -> Swift.String
  @objc public func picSaveHomeDirectoryWithName(image: UIKit.UIImage?, path: Swift.String) -> Swift.String
  @objc public func picSaveHomeDirectoryWithName(image: UIKit.UIImage?, name: Swift.String) -> Swift.String
  @objc public func saveFile(imagePath: Swift.String?, filePath: Swift.String)
  @objc public func saveFile_image(image: UIKit.UIImage?, filePath: Swift.String)
  @objc public func getFile(filePath: Swift.String) -> UIKit.UIImage?
  @objc public func resize(newSize: CoreFoundation.CGSize, oimage: UIKit.UIImage, suffix: Swift.String) -> UIKit.UIImage?
  @objc public func resize(newSize: CoreFoundation.CGSize, oimage: UIKit.UIImage, targetPath: Swift.String, suffix: Swift.String) -> UIKit.UIImage?
  @objc public func getOssDir() -> Swift.String
  @objc public func thumObjectIdTransferOriginalObjectId(thumObjectId: Swift.String) -> Swift.String
  @objc public func getFullFilePath(objectId: Swift.String) -> Swift.String
  @objc public func getFileTempModel(avatarModel: IMSdk.AvatarModel?, sourceSence: Swift.Int, imageType: IMSdk.TmImageType, fileSource: IMSdk.TmFileSource) -> IMSdk.TMImageTempModel
  @objc override dynamic public init()
  @objc deinit
}
public let IMServerName: Swift.String
@objc @_hasMissingDesignatedInitializers public class TMNet : ObjectiveC.NSObject {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ChatViewModelFactory {
  public static func ofAll() -> IMSdk.TMConversionSelector
  public static func ofPart(ids: [Swift.String]) -> IMSdk.TMConversionSelector
  public static func ofUnPart(ids: [Swift.String]) -> IMSdk.TMConversionSelector
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class TMCardCenterCell : IMSdk.TMCardBaseCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupModel(_ model: IMSdk.TMMessageModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
public let OWNER: Swift.Int
public let ADMIN: Swift.Int
public let PEOPLE: Swift.Int
@objc @_inheritsConvenienceInitializers @objcMembers public class UserEvent : ObjectiveC.NSObject, IMSdk.TMEvent {
  @objc public func getData() -> [Swift.String]
  @objc public func getName() -> Swift.String
  @objc public var uids: [Swift.String]
  @objc override dynamic public init()
  @objc deinit
}
public typealias UidTextClickBlock = (_ clickId: Swift.String) -> Swift.Void
@objc @_inheritsConvenienceInitializers @objcMembers public class TMUidTextMessageContentVo : ObjectiveC.NSObject, HandyJSON.HandyJSON {
  @objc public var temId: Swift.String
  @objc public var clickTotalCount: Swift.Int
  @objc public var textAttr: Foundation.NSMutableAttributedString {
    @objc get
    @objc set
  }
  @objc public func addBlock(act: @escaping IMSdk.UidTextClickBlock)
  @objc required override dynamic public init()
  @objc deinit
}
@objc public protocol SwipeTableViewCellDataSource {
  @objc func swipeTableViewCell(_ cell: IMSdk.SwipeTableViewCell, numberOfActionsForSwipeDirection direction: IMSdk.SwipeDirection) -> Swift.Int
  @objc func swipeTableViewCell(_ cell: IMSdk.SwipeTableViewCell, actionAtIndex index: Swift.Int, forSwipeDirection direction: IMSdk.SwipeDirection) -> IMSdk.SwipeAction
  @objc func swipeTableViewCell(_ cell: IMSdk.SwipeTableViewCell, actionViewForActionAtIndex index: Swift.Int, forSwipeDirection direction: IMSdk.SwipeDirection) -> IMSdk.SwipeActionView?
  @objc optional func swipeTableViewCell(_ cell: IMSdk.SwipeTableViewCell, widthForActionsForSwipeDirection direction: IMSdk.SwipeDirection) -> CoreFoundation.CGFloat
}
extension RxSwift.Reactive where Base : AsyncDisplayKit.ASTextNode2 {
  public var attributedText: IMSdk.ASBinder<Foundation.NSAttributedString?> {
    get
  }
  public func text(_ attributes: [Foundation.NSAttributedString.Key : Any]?) -> IMSdk.ASBinder<Swift.String?>
}
public struct TmMessageType {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class TMCardRightCell : IMSdk.TMCardBaseCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupModel(_ model: IMSdk.TMMessageModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
extension RxCocoa.SharedSequenceConvertibleType where Self.SharingStrategy == RxCocoa.DriverSharingStrategy {
  public func drive<O>(_ observer: O, directlyBind: Swift.Bool = false, setNeedsLayout node: AsyncDisplayKit.ASDisplayNode? = nil) -> RxSwift.Disposable where O : IMSdk.ASObserverType, Self.Element == O.Element
  public func drive<O>(_ observer: O, directlyBind: Swift.Bool = false, setNeedsLayout node: AsyncDisplayKit.ASDisplayNode? = nil) -> RxSwift.Disposable where O : IMSdk.ASObserverType, O.Element == Self.Element?
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TMFilesTool : ObjectiveC.NSObject {
  @objc public static func getFile(imageModel: IMSdk.TMImageTempModel, complete: ((_ exist: Swift.Bool, _ objectID: Swift.String) -> Swift.Void)?)
  @objc public static func getFile(objectID: Swift.String, width: Swift.Int, height: Swift.Int, complete: ((_ exist: Swift.Bool, _ objectID: Swift.String) -> Swift.Void)?)
  @objc override dynamic public init()
  @objc deinit
}
extension RxSwift.Reactive where Base : AsyncDisplayKit.ASImageNode {
  public var image: IMSdk.ASBinder<UIKit.UIImage?> {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TmMessageManager : ObjectiveC.NSObject {
  @objc public static let `default`: IMSdk.TmMessageManager
  @objc public func loadMoreMessages(chatId: Swift.String?, lastId: Swift.Int, messageCount: Swift.Int) -> [IMSdk.TmMessage]
  @objc public func getMessages(mids: [Swift.String]) -> [IMSdk.TmMessage]?
  @objc public func retractMessages(mids: [Swift.String])
  @objc public func deleteMessages(mids: [Swift.String])
  @objc public func getConversationUnReadCount(chatId: Swift.String) -> Swift.Int
  @objc public func getTotalUnread() -> Swift.Int
  @objc public func getAtStatusWithChats(chatIds: [Swift.String]) -> [Swift.String : Swift.Bool]
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class TextNoticeCardCell : IMSdk.ChatBaseCell {
  @objc @_Concurrency.MainActor(unsafe) public static let TextNoticeCardCellPadding: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public static let TextNoticeCardCellMargin: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public static let TextNoticeCardCellTitleBottomMargin: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public static let TextNoticeCardCellTimeLblHeight: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setupModel(_ model: IMSdk.TMMessageModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TmUserInfo : ObjectiveC.NSObject {
  @objc public var uid: Swift.String?
  @objc public var name: Swift.String?
  @objc public var avatar: Swift.String?
  @objc public var avatarInfo: IMSdk.AvatarModel?
  @objc public var aUid: Swift.String
  @objc public func localHaveInfo() -> Swift.Bool
  @objc public func haveAuid() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol ChatDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func onFileMessageClick(aMid: Swift.String, preView: IMSdk.FilePreView)
  @objc optional func onImageMessageClick(preView: IMSdk.TMImageBrowserView)
  @objc optional func onCardMessageClick(aMid: Swift.String, buttonId: Swift.String)
  @objc optional func onMiddleMessageClick(aMid: Swift.String, tmpId: Swift.String, buttonId: Swift.String)
  @objc optional func onNoticeMessageClick(aMid: Swift.String, buttonId: Swift.String)
  @objc optional func getMessageUnReadCount(count: Swift.Int)
  @objc optional func getCustomView(aMid: Swift.String, body: Swift.String, handleCustomView: ((UIKit.UIView) -> ())?, tapCustomView: ((UIKit.UIView) -> ())?)
}
public struct TmMessageStatus {
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ConversationSettingEvent : ObjectiveC.NSObject, IMSdk.TMEvent {
  @objc public func getData() -> [Swift.String]
  @objc public func getName() -> Swift.String
  @objc public var chatIds: [Swift.String]?
  @objc public static func send(chatIds: [Swift.String]?)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TmGroupManager : ObjectiveC.NSObject {
  @objc public static let `default`: IMSdk.TmGroupManager
  @objc public func updateGroupMute(chatId: Swift.String, isMute: Swift.Int, complete: ((_ error: Swift.Error?) -> Swift.Void)?)
  @objc override dynamic public init()
  @objc deinit
}
public struct ASBinder<Value> : IMSdk.ASObserverType {
  public typealias E = Value
  public init<Target>(_ target: Target, scheduler: RxSwift.ImmediateSchedulerType = MainScheduler(), binding: @escaping (Target, Value) -> ()) where Target : AnyObject
  public func on(_ event: RxSwift.Event<Value>, node: AsyncDisplayKit.ASDisplayNode?)
  public func on(_ event: RxSwift.Event<Value>)
  public func directlyBinding(_ element: Value?)
  public typealias Element = Value
}
public protocol ASObserverType : RxSwift.ObserverType {
  func on(_ event: RxSwift.Event<Self.Element>, node: AsyncDisplayKit.ASDisplayNode?)
  func directlyBinding(_ element: Self.Element?)
}
extension RxSwift.ObservableType {
  public func bind(to relays: RxRelay.PublishRelay<Self.Element>..., setNeedsLayout node: AsyncDisplayKit.ASDisplayNode?) -> RxSwift.Disposable
  public func bind(to relays: RxRelay.PublishRelay<Self.Element?>..., setNeedsLayout node: AsyncDisplayKit.ASDisplayNode?) -> RxSwift.Disposable
  public func bind(to relays: RxRelay.BehaviorRelay<Self.Element>..., setNeedsLayout node: AsyncDisplayKit.ASDisplayNode?) -> RxSwift.Disposable
  public func bind(to relays: RxRelay.BehaviorRelay<Self.Element?>..., setNeedsLayout node: AsyncDisplayKit.ASDisplayNode?) -> RxSwift.Disposable
}
extension RxSwift.ObservableType {
  public func bind<Observer>(to observers: Observer..., setNeedsLayout node: AsyncDisplayKit.ASDisplayNode? = nil) -> RxSwift.Disposable where Observer : IMSdk.ASObserverType, Self.Element == Observer.Element
  public func bind<Observer>(to observers: Observer..., setNeedsLayout node: AsyncDisplayKit.ASDisplayNode? = nil) -> RxSwift.Disposable where Observer : IMSdk.ASObserverType, Observer.Element == Self.Element?
}
@objc public protocol TMConversionSelector : ObjectiveC.NSObjectProtocol {
  @objc optional func selector() -> [Swift.String]
  @objc optional func unSelector() -> [Swift.String]
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TMTimeTool : ObjectiveC.NSObject {
  @objc public static let `default`: IMSdk.TMTimeTool
  @objc public func checkDateString(time: Foundation.TimeInterval, formatString: Swift.String = "yyyy-MM-dd H:mm aaa") -> Swift.String
  @objc public func checkConversationDate(time: Foundation.TimeInterval) -> Swift.String
  @objc public func convertChatMessageTime(groupTime: Foundation.TimeInterval, time: Foundation.TimeInterval) -> Swift.String
  @objc public func isThisYear(time: Foundation.TimeInterval) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class TMCardBaseCell : IMSdk.ChatBaseCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class FileUploadEvent : ObjectiveC.NSObject, IMSdk.TMEvent {
  @objc override dynamic public init()
  @objc public var objectIds: [Swift.String] {
    get
  }
  @objc public func getData() -> [Swift.String]
  @objc public func getName() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ApiBaseService {
  @objc deinit
}
@objc public enum TmMessageExtraActType : Swift.Int, HandyJSON.HandyJSONEnum {
  case normal = 0
  case forward
  case reference
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TmMessageExtraDiviceType : Swift.Int, HandyJSON.HandyJSONEnum {
  case ios = 1
  case android
  case mac
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TmMessageExtra : ObjectiveC.NSObject, HandyJSON.HandyJSON {
  @objc public var mids: [Swift.String]
  @objc public var ids: [Swift.String]
  @objc public var act: IMSdk.TmMessageExtraActType
  @objc public var op: Swift.String
  @objc public var f: IMSdk.TmMessageExtraDiviceType
  @objc required override dynamic public init()
  @objc deinit
}
public class Promise<Value> {
  public init(_ task: (@escaping (Value) -> Swift.Void, @escaping (Swift.Error) -> Swift.Void) throws -> Swift.Void)
  public static func reject(_ err: Swift.Error) -> IMSdk.Promise<Value>
  public static func resolve(_ value: Value) -> IMSdk.Promise<Value>
  public static func resolve() -> IMSdk.Promise<Swift.Void>
  @discardableResult
  public func then<Next>(_ task: @escaping (Value) throws -> IMSdk.Promise<Next>) -> IMSdk.Promise<Next>
  @discardableResult
  public func then<Next>(_ task: @escaping (Value, @escaping (Next) -> Swift.Void, @escaping (Swift.Error) -> Swift.Void) throws -> Swift.Void) -> IMSdk.Promise<Next>
  @available(*, deprecated)
  @discardableResult
  public func thenByThread<Next>(_ task: @escaping (Value, @escaping (Next) -> Swift.Void, @escaping (Swift.Error) -> Swift.Void) throws -> Swift.Void) -> IMSdk.Promise<Next>
  @discardableResult
  public func thenByThread<Next>(_ task: @escaping (Value) throws -> Next) -> IMSdk.Promise<Next>
  @discardableResult
  public func `catch`(_ task: @escaping (Swift.Error) throws -> IMSdk.Promise<Value>) -> IMSdk.Promise<Value>
  @discardableResult
  public func finally(_ task: @escaping () throws -> Swift.Void) -> IMSdk.Promise<Value>
  public static func race(_ promises: [IMSdk.Promise<Value>]) -> IMSdk.Promise<Value>
  public static func all(_ promises: [IMSdk.Promise<Value>]) -> IMSdk.Promise<[Value]>
  @objc deinit
}
extension IMSdk.Promise {
  public static func all<T2>(_ promise1: IMSdk.Promise<Value>, _ promise2: IMSdk.Promise<T2>) -> IMSdk.Promise<(Value, T2)>
  public static func all<T2, T3>(_ promise1: IMSdk.Promise<Value>, _ promise2: IMSdk.Promise<T2>, _ promise3: IMSdk.Promise<T3>) -> IMSdk.Promise<(Value, T2, T3)>
  public static func all<T2, T3, T4>(_ promise1: IMSdk.Promise<Value>, _ promise2: IMSdk.Promise<T2>, _ promise3: IMSdk.Promise<T3>, _ promise4: IMSdk.Promise<T4>) -> IMSdk.Promise<(Value, T2, T3, T4)>
  public static func all<T2, T3, T4, T5>(_ promise1: IMSdk.Promise<Value>, _ promise2: IMSdk.Promise<T2>, _ promise3: IMSdk.Promise<T3>, _ promise4: IMSdk.Promise<T4>, _ promise5: IMSdk.Promise<T5>) -> IMSdk.Promise<(Value, T2, T3, T4, T5)>
  public static func all<T2, T3, T4, T5, T6>(_ promise1: IMSdk.Promise<Value>, _ promise2: IMSdk.Promise<T2>, _ promise3: IMSdk.Promise<T3>, _ promise4: IMSdk.Promise<T4>, _ promise5: IMSdk.Promise<T5>, _ promise6: IMSdk.Promise<T6>) -> IMSdk.Promise<(Value, T2, T3, T4, T5, T6)>
}
open class MMJSONEncoder {
  public struct OutputFormatting : Swift.OptionSet {
    public let rawValue: Swift.UInt
    public init(rawValue: Swift.UInt)
    public static let prettyPrinted: IMSdk.MMJSONEncoder.OutputFormatting
    @available(macOS 10.13, iOS 11.0, watchOS 4.0, tvOS 11.0, *)
    public static let sortedKeys: IMSdk.MMJSONEncoder.OutputFormatting
    public typealias ArrayLiteralElement = IMSdk.MMJSONEncoder.OutputFormatting
    public typealias Element = IMSdk.MMJSONEncoder.OutputFormatting
    public typealias RawValue = Swift.UInt
  }
  public enum DateEncodingStrategy {
    case deferredToDate
    case secondsSince1970
    case millisecondsSince1970
    @available(macOS 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
    case iso8601
    case formatted(Foundation.DateFormatter)
    case custom((Foundation.Date, Swift.Encoder) throws -> Swift.Void)
  }
  public enum DataEncodingStrategy {
    case deferredToData
    case base64
    case custom((Foundation.Data, Swift.Encoder) throws -> Swift.Void)
  }
  public enum NonConformingFloatEncodingStrategy {
    case `throw`
    case convertToString(positiveInfinity: Swift.String, negativeInfinity: Swift.String, nan: Swift.String)
  }
  public enum KeyEncodingStrategy {
    case useDefaultKeys
    case convertToSnakeCase
    case custom((_ codingPath: [Swift.CodingKey]) -> Swift.CodingKey)
  }
  open var outputFormatting: IMSdk.MMJSONEncoder.OutputFormatting
  open var dateEncodingStrategy: IMSdk.MMJSONEncoder.DateEncodingStrategy
  open var dataEncodingStrategy: IMSdk.MMJSONEncoder.DataEncodingStrategy
  open var nonConformingFloatEncodingStrategy: IMSdk.MMJSONEncoder.NonConformingFloatEncodingStrategy
  open var keyEncodingStrategy: IMSdk.MMJSONEncoder.KeyEncodingStrategy
  open var userInfo: [Swift.CodingUserInfoKey : Any]
  public init()
  open func encode<T>(_ value: T) throws -> Foundation.Data where T : Swift.Encodable
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ConversationType : ObjectiveC.NSObject {
  @objc public static let NORMAL: Swift.Int
  @objc public static let NOTIFICATION: Swift.Int
  @objc public static let FOLDER: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
public struct TmFilePrefixType {
}
@objc @_inheritsConvenienceInitializers @objcMembers public class AvatarModel : ObjectiveC.NSObject, HandyJSON.HandyJSON {
  @objc public var bucketId: Swift.String?
  @objc public var file_type: Swift.String?
  @objc public var height: Swift.Int
  @objc public var text: Swift.String?
  @objc public var width: Swift.Int
  @objc required override dynamic public init()
  @objc public func getFileName() -> Swift.String
  @objc public func getLocalAvatar() -> Swift.String
  @objc public func getRemoteAvatar() -> Swift.String
  @objc public func getOriginalImagePath() -> Swift.String
  @objc public func getAppletsBannerImagePath(objId: Swift.String, fileType: Swift.String) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TmMessageDirection {
  public static func direction(sender: Swift.String?) -> Swift.Int
  @objc deinit
}
extension Swift.Dictionary {
  public var dicJsonEnCode: Swift.String? {
    get
  }
}
extension Swift.String.MD5EncryptType : Swift.Equatable {}
extension Swift.String.MD5EncryptType : Swift.Hashable {}
extension IMSdk.SwipeDirection : Swift.Equatable {}
extension IMSdk.SwipeDirection : Swift.Hashable {}
extension IMSdk.SwipeDirection : Swift.RawRepresentable {}
extension IMSdk.SwiftyJSONError : Swift.Equatable {}
extension IMSdk.SwiftyJSONError : Swift.Hashable {}
extension IMSdk.SwiftyJSONError : Swift.RawRepresentable {}
extension IMSdk.`Type` : Swift.Equatable {}
extension IMSdk.`Type` : Swift.Hashable {}
extension IMSdk.`Type` : Swift.RawRepresentable {}
extension IMSdk.writingOptionsKeys : Swift.Equatable {}
extension IMSdk.writingOptionsKeys : Swift.Hashable {}
extension IMSdk.TMNetError : Swift.Equatable {}
extension IMSdk.TMNetError : Swift.Hashable {}
extension IMSdk.TMNetError : Swift.RawRepresentable {}
extension IMSdk.YHGenerated.bundleType : Swift.Equatable {}
extension IMSdk.YHGenerated.bundleType : Swift.Hashable {}
extension IMSdk.YHGenerated.bundleType : Swift.RawRepresentable {}
extension IMSdk.TMLanguageSettingType : Swift.Equatable {}
extension IMSdk.TMLanguageSettingType : Swift.Hashable {}
extension IMSdk.TMLanguageSettingType : Swift.RawRepresentable {}
extension IMSdk.IMLanguageType : Swift.Equatable {}
extension IMSdk.IMLanguageType : Swift.Hashable {}
extension IMSdk.IMLanguageType : Swift.RawRepresentable {}
extension IMSdk.TMTransferProgressState : Swift.Equatable {}
extension IMSdk.TMTransferProgressState : Swift.Hashable {}
extension IMSdk.TMTransferProgressState : Swift.RawRepresentable {}
extension IMSdk.TMTransferSence : Swift.Equatable {}
extension IMSdk.TMTransferSence : Swift.Hashable {}
extension IMSdk.TMTransferSence : Swift.RawRepresentable {}
extension IMSdk.IMEnvironmentType : Swift.Equatable {}
extension IMSdk.IMEnvironmentType : Swift.Hashable {}
extension IMSdk.IMEnvironmentType : Swift.RawRepresentable {}
extension UIKit.UIDevice.YHDeviceMachineType : Swift.Equatable {}
extension UIKit.UIDevice.YHDeviceMachineType : Swift.Hashable {}
extension UIKit.UIDevice.YHDeviceMachineType : Swift.RawRepresentable {}
extension IMSdk.TmMessageExtraActType : Swift.Equatable {}
extension IMSdk.TmMessageExtraActType : Swift.Hashable {}
extension IMSdk.TmMessageExtraActType : Swift.RawRepresentable {}
extension IMSdk.TmMessageExtraDiviceType : Swift.Equatable {}
extension IMSdk.TmMessageExtraDiviceType : Swift.Hashable {}
extension IMSdk.TmMessageExtraDiviceType : Swift.RawRepresentable {}
